{"ast":null,"code":"\"use strict\";\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result[\"default\"] = mod;\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar react_1 = __importStar(require(\"react\"));\n\nvar NavButton_1 = __importDefault(require(\"./modules/NavButton\"));\n\nvar object_1 = require(\"./helpers/object\");\n\nfunction Pagination(_a) {\n  var rowsPerPage = _a.rowsPerPage,\n      currentPage = _a.currentPage,\n      onPageNavigate = _a.onPageNavigate,\n      labels = _a.labels,\n      maxPage = _a.maxPage,\n      classes = _a.classes,\n      _b = _a.components,\n      Button = _b.Button,\n      ButtonGroup = _b.ButtonGroup;\n  var paginateHandler = react_1.useCallback(function (pageNum) {\n    return function () {\n      return onPageNavigate(pageNum);\n    };\n  }, [onPageNavigate]);\n  var renderedElements = null;\n\n  if (rowsPerPage !== undefined && maxPage !== undefined) {\n    var buttons = [];\n    var firstLabel = labels.first || 'First';\n    var prevLabel = labels.prev || 'Prev';\n    var nextLabel = labels.next || 'Next';\n    var lastLabel = labels.last || 'Last';\n    var isCurrentPageOutOfBounds = currentPage > maxPage;\n    var startNumber = void 0;\n    var i = 0;\n    var hasPrev = true;\n    var hasNext = true;\n\n    if (currentPage === 1) {\n      // Active button is the first one.\n      startNumber = 1;\n      hasPrev = false;\n      hasNext = maxPage > 1;\n    } else if (currentPage === maxPage && maxPage !== 1) {\n      // Active button is in the last.\n      startNumber = maxPage - 2 > 0 ? currentPage - 2 : 1;\n      hasNext = false;\n    } else {\n      // Active button is in the middle.\n      startNumber = currentPage - 1;\n    }\n\n    buttons.push(react_1.default.createElement(NavButton_1.default, {\n      Component: Button,\n      className: classes.paginationButton,\n      key: \"page-\" + firstLabel,\n      pageNumber: 1,\n      disabled: !hasPrev,\n      onPageNavigate: paginateHandler,\n      label: firstLabel\n    }), react_1.default.createElement(NavButton_1.default, {\n      Component: Button,\n      className: classes.paginationButton,\n      key: \"page-\" + prevLabel,\n      // If out of bounds, prev button refers to the last page.\n      pageNumber: isCurrentPageOutOfBounds ? maxPage : currentPage - 1,\n      disabled: !hasPrev,\n      onPageNavigate: paginateHandler,\n      label: prevLabel\n    }));\n\n    if (!isCurrentPageOutOfBounds) {\n      while (i < 3 && startNumber <= maxPage) {\n        buttons.push(react_1.default.createElement(NavButton_1.default, {\n          Component: Button,\n          key: \"page-btn-\" + i,\n          pageNumber: startNumber,\n          disabled: currentPage === startNumber,\n          onPageNavigate: paginateHandler,\n          label: startNumber,\n          className: classes.paginationButton\n        }));\n        i += 1;\n        startNumber += 1;\n      }\n    } else {\n      // If current page is more than maxPage, we disable the button.\n      // This is intentional so the user knows that no data in there.\n      hasNext = false;\n      buttons.push(react_1.default.createElement(NavButton_1.default, {\n        Component: Button,\n        key: \"page-btn-\" + startNumber,\n        className: classes.paginationButton,\n        pageNumber: currentPage - 1,\n        disabled: true,\n        onPageNavigate: paginateHandler,\n        label: currentPage\n      }));\n    }\n\n    buttons.push(react_1.default.createElement(NavButton_1.default, {\n      Component: Button,\n      className: classes.paginationButton,\n      key: \"page-\" + nextLabel,\n      pageNumber: currentPage + 1,\n      disabled: !hasNext,\n      onPageNavigate: paginateHandler,\n      label: nextLabel\n    }), react_1.default.createElement(NavButton_1.default, {\n      Component: Button,\n      className: classes.paginationButton,\n      key: \"page-\" + lastLabel,\n      pageNumber: maxPage,\n      disabled: !hasNext,\n      onPageNavigate: paginateHandler,\n      label: lastLabel\n    }));\n    renderedElements = react_1.default.createElement(ButtonGroup, {\n      className: object_1.makeClasses('ButtonGroup__root', classes.paginationButtonGroup)\n    }, buttons);\n  }\n\n  return renderedElements;\n}\n\nexports.default = Pagination;","map":null,"metadata":{},"sourceType":"script"}