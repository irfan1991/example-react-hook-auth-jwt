{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar react_1 = __importDefault(require(\"react\"));\n\nvar object_1 = require(\"./helpers/object\");\n\nvar Form_1 = __importDefault(require(\"react-bootstrap/Form\"));\n\nfunction PaginationOptsGroup(_a) {\n  var classes = _a.classes,\n      labels = _a.labels,\n      value = _a.value,\n      onChange = _a.onChange,\n      options = _a.options;\n  return react_1.default.createElement(Form_1.default, {\n    inline: true,\n    className: object_1.makeClasses('paginationOpts__root', classes.paginationOptsForm)\n  }, react_1.default.createElement(Form_1.default.Group, {\n    controlId: \"formGroupPagination\",\n    className: classes.paginationOptsFormGroup\n  }, react_1.default.createElement(\"span\", {\n    className: classes.paginationOptsFormText\n  }, labels.show || 'Show', ' '), react_1.default.createElement(Form_1.default.Control, {\n    name: \"form-control-pagination\",\n    defaultValue: value,\n    as: \"select\",\n    placeholder: \"select\",\n    onChange: onChange,\n    className: classes.paginationOptsFormControl\n  }, options.map(function (option, idx) {\n    var optionProps = {\n      key: \"page-opt-\" + option,\n      value: option\n    };\n    return react_1.default.createElement(\"option\", __assign({}, optionProps), option);\n  })), react_1.default.createElement(\"span\", {\n    className: classes.paginationOptsFormText\n  }, ' ', labels.entries || 'entries')));\n}\n\nexports.PaginationOptsGroup = PaginationOptsGroup;\n\nfunction PaginationOpts(_a) {\n  var labels = _a.labels,\n      rowsPerPage = _a.rowsPerPage,\n      rowsPerPageOption = _a.rowsPerPageOption,\n      onRowsPerPageChange = _a.onRowsPerPageChange,\n      classes = _a.classes,\n      CustomPaginationOptsGroup = _a.CustomPaginationOptsGroup;\n\n  function onRowsPerPageChangeHandler(e) {\n    onRowsPerPageChange(Number(e.target.value));\n  }\n\n  var renderedElements = null;\n\n  if (rowsPerPage !== undefined) {\n    var opts_1 = [rowsPerPage]; // Make sure there are no duplicates being pushed.\n\n    if (rowsPerPageOption !== undefined) {\n      rowsPerPageOption.forEach(function (opt) {\n        if (!opts_1.includes(opt) && typeof opt === 'number') {\n          opts_1.push(opt);\n        }\n      }); // Order the pagination options ascending.\n\n      opts_1 = opts_1.sort(function (a, b) {\n        if (a < b) {\n          return -1;\n        } else if (a > b) {\n          return 1;\n        }\n\n        return 0;\n      });\n    } // Only render option if the length is more than 1.\n\n\n    if (opts_1.length > 1) {\n      var UsedPaginationOpts = CustomPaginationOptsGroup || PaginationOptsGroup;\n      renderedElements = react_1.default.createElement(UsedPaginationOpts, {\n        classes: classes,\n        labels: labels,\n        onChange: onRowsPerPageChangeHandler,\n        options: opts_1,\n        value: rowsPerPage\n      });\n    }\n  }\n\n  return renderedElements;\n}\n\nexports.default = PaginationOpts;","map":null,"metadata":{},"sourceType":"script"}